// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package constants

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8a25db09DecodeGithubComGoParkMailRu20191EscapadeInternalServicesGameConstants(in *jlexer.Lexer, out *roomConfiguration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Set":
			out.Set = bool(in.Bool())
		case "nameMin":
			out.NameMin = int32(in.Int32())
		case "nameMax":
			out.NameMax = int32(in.Int32())
		case "timeToPrepareMin":
			out.TimeToPrepareMin = int32(in.Int32())
		case "timeToPrepareMax":
			out.TimeToPrepareMax = int32(in.Int32())
		case "timeToPlayMin":
			out.TimeToPlayMin = int32(in.Int32())
		case "timeToPlayMax":
			out.TimeToPlayMax = int32(in.Int32())
		case "playersMin":
			out.PlayersMin = int32(in.Int32())
		case "playersMax":
			out.PlayersMax = int32(in.Int32())
		case "observersMax":
			out.ObserversMax = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8a25db09EncodeGithubComGoParkMailRu20191EscapadeInternalServicesGameConstants(out *jwriter.Writer, in roomConfiguration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Set\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Set))
	}
	{
		const prefix string = ",\"nameMin\":"
		out.RawString(prefix)
		out.Int32(int32(in.NameMin))
	}
	{
		const prefix string = ",\"nameMax\":"
		out.RawString(prefix)
		out.Int32(int32(in.NameMax))
	}
	{
		const prefix string = ",\"timeToPrepareMin\":"
		out.RawString(prefix)
		out.Int32(int32(in.TimeToPrepareMin))
	}
	{
		const prefix string = ",\"timeToPrepareMax\":"
		out.RawString(prefix)
		out.Int32(int32(in.TimeToPrepareMax))
	}
	{
		const prefix string = ",\"timeToPlayMin\":"
		out.RawString(prefix)
		out.Int32(int32(in.TimeToPlayMin))
	}
	{
		const prefix string = ",\"timeToPlayMax\":"
		out.RawString(prefix)
		out.Int32(int32(in.TimeToPlayMax))
	}
	{
		const prefix string = ",\"playersMin\":"
		out.RawString(prefix)
		out.Int32(int32(in.PlayersMin))
	}
	{
		const prefix string = ",\"playersMax\":"
		out.RawString(prefix)
		out.Int32(int32(in.PlayersMax))
	}
	{
		const prefix string = ",\"observersMax\":"
		out.RawString(prefix)
		out.Int32(int32(in.ObserversMax))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v roomConfiguration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8a25db09EncodeGithubComGoParkMailRu20191EscapadeInternalServicesGameConstants(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v roomConfiguration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8a25db09EncodeGithubComGoParkMailRu20191EscapadeInternalServicesGameConstants(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *roomConfiguration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8a25db09DecodeGithubComGoParkMailRu20191EscapadeInternalServicesGameConstants(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *roomConfiguration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8a25db09DecodeGithubComGoParkMailRu20191EscapadeInternalServicesGameConstants(l, v)
}
func easyjson8a25db09DecodeGithubComGoParkMailRu20191EscapadeInternalServicesGameConstants1(in *jlexer.Lexer, out *fieldConfiguration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Set":
			out.Set = bool(in.Bool())
		case "widthMin":
			out.WidthMin = int32(in.Int32())
		case "widthMax":
			out.WidthMax = int32(in.Int32())
		case "heightMin":
			out.HeightMin = int32(in.Int32())
		case "heightMax":
			out.HeightMax = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8a25db09EncodeGithubComGoParkMailRu20191EscapadeInternalServicesGameConstants1(out *jwriter.Writer, in fieldConfiguration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Set\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Set))
	}
	{
		const prefix string = ",\"widthMin\":"
		out.RawString(prefix)
		out.Int32(int32(in.WidthMin))
	}
	{
		const prefix string = ",\"widthMax\":"
		out.RawString(prefix)
		out.Int32(int32(in.WidthMax))
	}
	{
		const prefix string = ",\"heightMin\":"
		out.RawString(prefix)
		out.Int32(int32(in.HeightMin))
	}
	{
		const prefix string = ",\"heightMax\":"
		out.RawString(prefix)
		out.Int32(int32(in.HeightMax))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v fieldConfiguration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8a25db09EncodeGithubComGoParkMailRu20191EscapadeInternalServicesGameConstants1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v fieldConfiguration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8a25db09EncodeGithubComGoParkMailRu20191EscapadeInternalServicesGameConstants1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *fieldConfiguration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8a25db09DecodeGithubComGoParkMailRu20191EscapadeInternalServicesGameConstants1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *fieldConfiguration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8a25db09DecodeGithubComGoParkMailRu20191EscapadeInternalServicesGameConstants1(l, v)
}
