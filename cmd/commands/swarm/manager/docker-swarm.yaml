version: '3'
services:

  traefik:
    image: traefik:v1.7
    ports:
      - "80:80"     # The HTTP port
      - "8079:8080" # The Web UI (enabled by --api)
    networks:
      - backend-overlay2
    labels:
      - "traefik.docker.network=backend"
      - "traefik.port=8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
      - ./../../../../extra/traefik/traefik.toml:/traefik.toml # Traefik configuration file
    command: --web \
      --api \
      --docker \
      --docker.swarmmode \
      --docker.watch 
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]

  pg:
    image: smartphonejava/pg:latest
    networks:
      - backend-overlay2
    ports:
      - "5429:5432" 
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager] 

  pg-auth:
    image: postgres:11.2-alpine
    networks:
      - backend-overlay2
    environment:
      POSTGRES_USER: 'auth' 
      POSTGRES_PASSWORD: 'auth'
      POSTGRES_DB: 'authbase'
    ports:
      - "5431:5432" 
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]    

  pg-ery:
    image: smartphonejava/pg-ery:latest
    ports:
      - "5430:5432"   
    networks:
      - backend-overlay2
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager] 

#sudo docker inspect --format '{{(index .NetworkSettings.Networks "2019_1_escapade_default").IPAddress }}' 2019_1_escapade_api_1
#curl -H Host:api.2019-1-escapade.docker.localhost http://127.0.0.1/api/user
#curl -H Host:api.consul.localhost http://127.0.0.1:8081
# ab -n 10 -H 'Host:api.consul.localhost' http://localhost:8081/
# sudo docker-compose up --scale api=5 api

#http://api.consul.localhost:8081/health

  api:
    image: smartphonejava/api:latest
    networks:
      - backend-overlay2
    ports:
      - 3001:3001
    environment:
      - CONSUL_ADDRESS=app_consul-agent
      - AUTH_ADDRESS=http://app_auth:3003 #http://auth.consul.localhost:8081 
    command: cmd/services/api/api.json internal/photo/photo.json secret.json 3001
    labels:
      - "traefik.enable=false"
      - "org.label-schema.group=monitoring"
    logging:
      options:
        max-size: 10m
    deploy:
      replicas: 5
      update_config:
        parallelism: 3
      restart_policy:
        condition: on-failure
        window: 5s
      placement:
        constraints: [node.role == worker] 


  chat:
    image: smartphonejava/chat:latest
    environment:
      - CONSUL_ADDRESS=app_consul-agent
    networks:
      - backend-overlay2
    ports:
      - 3066-3087:3060
    labels:
      - "traefik.enable=false"
      - "org.label-schema.group=monitoring"
    command: cmd/services/chat/chat.json 3060
    logging:
      options:
        max-size: 10m
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager] 

  ### auth ###

  auth:
    image: smartphonejava/auth:latest
    networks:
      - backend-overlay2
    ports:
      - 3022-3043:3003
    environment:
      - CONSUL_ADDRESS=app_consul-agent
      #/bin/sh -c "./wait-for-it.sh pg:5432 && ./wait-for-it.sh auth:3333 && ./bin/api"
      # ./wait-for-it.sh pg:5432 &&  ./wait-for-it.sh  pg-auth:5432 && ./wait-for-it.sh pg-ery:5432 &&
    command: cmd/services/auth/auth.json 3003
    labels:
      - "traefik.enable=false"
      - "org.label-schema.group=monitoring"
    logging:
      options:
        max-size: 10m
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager] 

  game:
    image: smartphonejava/game:latest
    networks:
      - backend-overlay2
    ports:
      - 3044-3055:3002
    labels:
      - "traefik.enable=false"
      - "org.label-schema.group=monitoring"
    environment:
      - CONSUL_ADDRESS=app_consul-agent
      - AUTHSERVICE_URL=auth:3333
      - PORT_GAME_URL=:3002
    command: cmd/services/game/game.json cmd/services/game/photo.json secret.json cmd/services/game/field.json cmd/services/game/room.json 3002
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager] 

  prometheus:
    image: prom/prometheus:latest
    networks:
      - backend-overlay2
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    labels:
     - "traefik.frontend.rule=Host:prometheus.localhost"
     - "traefik.port=9090"
     - "traefik.docker.network=inbound"
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager] 

  grafana:
    image: grafana/grafana
    networks:
      - backend-overlay2
    environment:
     - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
     - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
     - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - 3000:3000
    labels:
      - "traefik.port=3000"
      - "traefik.docker.network=backend"
      - "traefik.frontend.rule=Host:grafana.localhost"
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager] 
  ### discovery ###

  ## consul servers ##
  consul-server:
    image: smartphonejava/consul:latest
    networks:
      - backend-overlay2
    ports:
      - 8529-8549:8500
      - 8329-8349:8301
      # todo 142.93.79.194-> to env
    command: agent -server -join app_consul -advertise 142.93.79.194 -ui-dir /ui -config-file=./consul/config/server.json
    deploy:
        restart_policy:
          condition: on-failure
        placement:
          constraints: [node.role == manager] 

  ## consul bootstrap ##
  consul:
    image: smartphonejava/consul:latest 
    networks:
      - backend-overlay2
    ports:
      - 8400:8400
      - 8500:8500
      - 8600:53/udp
      # todo 142.93.79.194-> to env
    command: agent -server -bootstrap -node bootstrap -advertise 142.93.79.194 -client 0.0.0.0 -ui -config-file=./consul/config/bootstrap.json
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager] 
  
  ## consul agents ##
  consul-agent:
    image: smartphonejava/consul-agent:latest
    networks:
      - backend-overlay2
    ports:
      - 8501:8500
      - 8300:8300
      - 8301:8301
    command: agent -join app_consul-server -advertise 142.93.79.194 -client 0.0.0.0 -ui -config-file=./consul/config/client.json
    labels:
      - "traefik.frontend.rule=Host:consul-agent.2019-1-escapade.docker.localhost"
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager] 

  front:
    image: smartphonejava/front:latest
    networks:
      - backend-overlay2
    ports:
      - "8088:8080"   
    command: npm start
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager] 

  alertmanager:
    image: prom/alertmanager:v0.19.0
    networks:
      - backend-overlay2
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    ports:
      - 9093:9093
    deploy:
      placement:
        constraints: [node.role == manager] 

  nodeexporter:
    image: prom/node-exporter:v0.18.1
    networks:
      - backend-overlay2
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100
    deploy:
      placement:
        constraints: [node.role == manager] 

  cadvisor:
    image: google/cadvisor:v0.33.0
    networks:
      - backend-overlay2
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    ports:
      - 8085:8080
    deploy:
      mode: global
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer:stable
    networks:
      - backend-overlay2
    ports:
      - "8084:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager] 

networks:
   backend-overlay2:
    external:
       name: backend-overlay2
