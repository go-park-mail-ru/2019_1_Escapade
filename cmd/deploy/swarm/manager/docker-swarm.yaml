version: '3.7'

x-network: &network
  networks:
    - traefik

x-logging: &logging
  logging:
    options:
      max-size: 10m

x-consul: &consul
  image: consul:1.0.2
  networks:
    backend-overlay:
      aliases:
        - consul.cluster
  environment:
    - IP=$IP
  volumes:
    - ~/2019_1_Escapade/extra/consul/config:/config

x-backend: &backend-server
  <<: *logging
  <<: *network
  volumes:
    - ./../../../..:/2019_1_Escapade
  labels:
    - "org.label-schema.group=monitoring"
  
x-backend-env: &backend-env
  - DB_CONN_STRING=postgres://rolepade:escapade@pg:5432/escabase?sslmode=disable
  - CONSUL_ADDRESS=consul:8500
  - network=traefik
  - entrypoint=web

x-manager: &manager
  deploy:
    restart_policy:
      condition: on-failure
    placement:
      constraints: [node.role == manager] 

x-worker: &worker
  deploy:
    placement:
      constraints: [node.role == worker] 

services:

  ### Load balancer ###

  traefik:
    <<: *manager
    <<: *logging
    <<: *network
    image: traefik:v2.1
    ports:
      - 80:80     # The HTTP port
      - 443:443     # The HTTPS port
      - 8080:8080 # The Web UI
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
      - ./../../../../extra/traefik/traefik.toml:/traefik.toml # Traefik configuration file
    command: 
      - --api=true

  whoami:
    <<: *network
    image: containous/whoami
    command:
      - --port=8082
    deploy:
      replicas: 2
      labels:
        - traefik.enable=true
        - traefik.http.services.whoami.loadbalancer.server.port=8082
        - traefik.http.routers.whoami.rule=PathPrefix(`/moscow`)
        - traefik.http.routers.whoami.service=whoami
        - traefik.http.routers.whoami.entrypoints=web

  ### Database servers ###

  pg:
    <<: *manager
    <<: *logging
    <<: *network
    image: smartphonejava/pg:latest
    ports:
      - "5429:5432"

  # pg-auth:
  #   <<: *logging
  #   image: postgres:11.2-alpine
  #   networks:
  #     - backend-overlay
  #   environment:
  #     POSTGRES_USER: 'auth' 
  #     POSTGRES_PASSWORD: 'auth'
  #     POSTGRES_DB: 'authbase'
  #   ports:
  #     - "5431:5432" 
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #     placement:
  #       constraints: [node.role == manager]    

  # pg-ery:
  #   <<: *logging
  #   image: smartphonejava/pg-ery:latest
  #   ports:
  #     - "5430:5432"   
  #   networks:
  #     - backend-overlay
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #     placement:
  #       constraints: [node.role == manager] 

  ### Backend servers ###

  api:
    <<: *worker
    <<: *backend-server
    image: smartphonejava/api:latest
    ports:
      - 3001:3001
    environment:
      - AUTH_ADDRESS=http://auth:3003 
      - DB_CONN_STRING=postgres://rolepade:escapade@pg:5432/escabase?sslmode=disable
      - network=traefik
      - entrypoint=web
    command: 
      - --config=2019_1_Escapade/cmd/services/api/api.json
      - --photo=2019_1_Escapade/internal/photo/photo.json
      - --secrets=2019_1_Escapade/secret.json 
      - --port=3001
      - --name=api
      - --subnet=10.10.8.
      - --consul=consul:8500
    deploy:
      replicas: 4
      update_config:
        parallelism: 3
      restart_policy:
        condition: on-failure
        window: 5s

  # chat:
  #   <<: *backend-server
  #   image: smartphonejava/chat:latest
  #   environment:
  #     - DB_CONN_STRING=postgres://rolepade:escapade@pg:5432/escabase?sslmode=disable
  #     - CONSUL_ADDRESS=consul-agent
  #   ports:
  #     - 3066-3087:3060
  #   command: 
  #     - 2019_1_Escapade/cmd/services/chat/chat.json
  #     - "3060"
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #     placement:
  #       constraints: [node.role == manager] 

  # auth:
  #   <<: *backend-server
  #   image: smartphonejava/auth:latest
  #   ports:
  #     - 3022-3043:3003
  #   environment:
  #     - DB_CONN_STRING=postgres://rolepade:escapade@pg:5432/escabase?sslmode=disable
  #     - CONSUL_ADDRESS=consul-agent
  #   command: 
  #     - 2019_1_Escapade/cmd/services/auth/auth.json
  #     - "3003"
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #     placement:
  #       constraints: [node.role == manager] 

  # game:
  #   <<: *backend-server
  #   image: smartphonejava/game:latest
  #   ports:
  #     - 3044-3055:3002
  #   environment:
  #     - DB_CONN_STRING=postgres://rolepade:escapade@pg:5432/escabase?sslmode=disable
  #     - CONSUL_ADDRESS=consul-agent
  #     - AUTHSERVICE_URL=auth:3333
  #     - PORT_GAME_URL=:3002
  #   command: 
  #     - 2019_1_Escapade/cmd/services/game/game.json
  #     - 2019_1_Escapade/cmd/services/game/photo.json
  #     - 2019_1_Escapade/secret.json 
  #     - 2019_1_Escapade/cmd/services/game/field.json
  #     - 2019_1_Escapade/cmd/services/game/room.json
  #     - "3002"
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #     placement:
  #       constraints: [node.role == manager] 

  ### Statistics collectors ###

  prometheus:
    <<: *manager
    <<: *logging
    <<: *network
    image: prom/prometheus:latest
    volumes:
      - ./../../../../extra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      # - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.services.prometheus.loadbalancer.server.port=9090
        - traefik.http.routers.prometheus.rule=PathPrefix(`/prometheus`)
        - traefik.http.routers.prometheus.service=prometheus
        - traefik.http.routers.prometheus.entrypoints=web
        - traefik.docker.network=traefik

  nodeexporter:
    <<: *logging
    <<: *network
    image: prom/node-exporter:v0.18.1
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100
    deploy:
      mode: global

  grafana:
    <<: *manager
    <<: *logging
    <<: *network
    image: grafana/grafana:5.0.0
    environment:
     - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
     - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
     - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - 3000:3000
    volumes:
      - ./../../../../extra/grafana:/var/lib/grafana
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.services.grafana.loadbalancer.server.port=3000
        - traefik.http.routers.grafana.rule=PathPrefix(`/grafana`)
        - traefik.http.routers.grafana.service=grafana
        - traefik.http.routers.grafana.entrypoints=web
        - traefik.docker.network=traefik
 
  ### Service discovery ###

  consul: 
    <<: *logging
    <<: *manager
    networks:
      traefik:
        aliases:
          - consul.cluster
    image: consul:1.6.2
    ports:
      - "8500:8500"
      - "8300:8300"
      - "8400:8400"
      - "8301:8301/tcp"
      - "8302:8302/tcp"
      - "8301:8301/udp"
      - "8302:8302/udp"
      - "8610:53/udp"
      #-node bootstrap
    command: 
      - agent 
      - -config-file=./config/bootstrap.json
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./../../../../extra/consul/config:/config

  ### Frontend servers ###

  # front:
  #   <<: *logging
  #   image: smartphonejava/front:latest
  #   networks:
  #     - backend-overlay
  #   ports:
  #     - "8088:8080"   
  #   command: start
  #   labels:
  #     - traefik.enable=true
  #     - "traefik.frontend.rule=PathPrefixStrip: /somepath"
  #     - traefik.port=8088
  #     - traefil.docker.network=backend-overlay
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #     placement:
  #       constraints: [node.role != manager] 

  ### unused servers ###

  # alertmanager:
  #   <<: *logging
  #   image: prom/alertmanager:v0.19.0
  #   networks:
  #     - backend-overlay
  #   volumes:
  #     - ./alertmanager/:/etc/alertmanager/
  #   command:
  #     - '--config.file=/etc/alertmanager/config.yml'
  #     - '--storage.path=/alertmanager'
  #   ports:
  #     - 9093:9093
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager] 

  # cadvisor:
  #   <<: *logging
  #   image: google/cadvisor:v0.33.0
  #   networks:
  #     - backend-overlay
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
  #   ports:
  #     - 8085:8080
  #   deploy:
  #     mode: global
  #     placement:
  #       constraints: [node.role == manager]

  # visualizer:
  #   <<: *logging
  #   image: dockersamples/visualizer:stable
  #   networks:
  #     - backend-overlay
  #   ports:
  #     - "8084:8080"
  #   stop_grace_period: 1m30s
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager] 

networks:
   traefik:
     driver: overlay
     external: true


# x-consul: &consul
#   <<: *logging  
#   image: consul:1.6.2
#   <<: *network
#   volumes:
#     - ./../../../../extra/consul/config:/config

# consul-server:
#   <<: *logging
#   networks:
#     traefik:
#       aliases:
#         - consul.cluster
#   image: consul:1.6.2
#   ports:
#     - "8511:8500"
#     - "8311:8301/tcp"
#     - "8312:8302/tcp"
#     - "8311:8301/udp"
#     - "8312:8302/udp"
#   command: agent -join consul -config-file=./config/server.json
#   volumes:
#     - ./../../../../extra/consul/config:/config
#   deploy:
#     replicas: 3
#     restart_policy:
#       condition: on-failure
#     placement:
#       constraints: [node.role == manager] 

# consul-agent:
#   <<: *logging
#   networks:
#     traefik:
#       aliases:
#         - consul.cluster
#   image: consul:1.6.2
#   ports:
#     - "8501:8500"
#     - "8321:8301/tcp"
#     - "8322:8302/tcp"
#     - "8321:8301/udp"
#     - "8322:8302/udp"
#   command: agent -join consul-server -config-file=./config/client.json 
#   environment:
#     - CONSUL_BIND_INTERFACE=eth0
#   volumes:
#     - ./../../../../extra/consul/config:/config
#   labels:
#     - "traefik.frontend.rule=Host:consul-agent.2019-1-escapade.docker.localhost"
#   deploy:
#     replicas: 3
#     restart_policy:
#       condition: on-failure
#     placement:
#       constraints: [node.role == manager] 


#sudo docker inspect --format '{{(index .NetworkSettings.Networks "2019_1_escapade_default").IPAddress }}' 2019_1_escapade_api_1
#curl -H Host:api.2019-1-escapade.docker.localhost http://127.0.0.1/api/user
#curl -H Host:api.consul.localhost http://127.0.0.1:8081
# ab -n 10 -H 'Host:api.consul.localhost' http://localhost:8081/
# sudo docker-compose up --scale api=5 api

#http://api.consul.localhost:8081/health