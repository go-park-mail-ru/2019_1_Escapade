basePath: /api/v1
definitions:
  models.Game:
    properties:
      exploded:
        type: boolean
      fieldHeight:
        type: integer
      fieldWidth:
        type: integer
      finihsed:
        type: boolean
      minsFound:
        type: integer
      minsTotal:
        type: integer
    type: object
  models.Pages:
    properties:
      amount:
        type: integer
    type: object
  models.Result:
    properties:
      message:
        type: string
      place:
        type: string
      success:
        type: boolean
    type: object
  models.UserPublicInfo:
    properties:
      bestScore:
        type: string
      bestTime:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
host: https://escapade-backend.herokuapp.com
info:
  contact: {}
  description: Documentation
  license: {}
  title: Escapade API
  version: "1.0"
paths:
  /avatar:
    get:
      description: Get user avatar
      operationId: GetImage
      responses:
        "200":
          description: Avatar found successfully
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "401":
          description: Required authorization
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "404":
          description: Avatar not found
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: Get user avatar
    post:
      description: Create user avatar
      operationId: PostImage
      responses:
        "201":
          description: Avatar created successfully
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "401":
          description: Required authorization
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "500":
          description: Avatar not found
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: Create user avatar
  /session:
    delete:
      description: logout
      operationId: Logout
      responses:
        "200":
          description: Get successfully
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "401":
          description: Require authorization
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "500":
          description: server error
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: logout
    options:
      description: catch CORS preflight
      operationId: OK1222
      responses:
        "200":
          description: successfully
      summary: catch CORS preflight
    post:
      description: login
      operationId: Login
      responses:
        "200":
          description: Get successfully
          schema:
            $ref: '#/definitions/models.UserPublicInfo'
            type: object
        "400":
          description: invalid name/email or password
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "500":
          description: server error
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: login
  /user:
    delete:
      description: delete account
      operationId: DeleteAccount
      responses:
        "200":
          description: Get successfully
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "500":
          description: server error
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: delete account
    get:
      description: get public user information
      operationId: GetMyProfile
      responses:
        "200":
          description: successfully
          schema:
            $ref: '#/definitions/models.UserPublicInfo'
            type: object
        "401":
          description: Required authorization
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "500":
          description: server error
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: get user
    post:
      description: create new user
      operationId: Register
      responses:
        "201":
          description: Create user successfully
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "400":
          description: Invalid information
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: create new user
    put:
      description: update public info
      operationId: UpdateProfile
      responses:
        "200":
          description: Get successfully
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "400":
          description: invalid info
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "401":
          description: need authorization
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: update user information
  /user/Avatar:
    options:
      description: catch CORS preflight
      operationId: OK4
      responses:
        "200":
          description: successfully
      summary: catch CORS preflight
  /user/logout:
    options:
      description: catch CORS preflight
      operationId: OK3
      responses:
        "200":
          description: successfully
      summary: catch CORS preflight
  /users/{name}/games/{page}:
    get:
      description: Get amount of users list page
      operationId: GetPlayerGames
      responses:
        "200":
          description: Get successfully
          schema:
            items:
              $ref: '#/definitions/models.Game'
            type: array
        "400":
          description: invalid username or page
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "404":
          description: games not found
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "500":
          description: Databse error
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: get users game
  /users/{name}/profile:
    get:
      description: return public information, such as name or best_score
      operationId: GetProfile
      parameters:
      - description: User name
        in: path
        name: name
        type: string
      responses:
        "200":
          description: Profile found successfully
          schema:
            $ref: '#/definitions/models.UserPublicInfo'
            type: object
        "400":
          description: Invalid username
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: Get some of user fields
  /users/{page}:
    get:
      description: Get page of user list
      operationId: GetUsers
      responses:
        "200":
          description: Get successfully
          schema:
            items:
              $ref: '#/definitions/models.Result'
            type: array
        "400":
          description: Invalid pade
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "404":
          description: Users not found
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: Get users list
  /users/pages_amount:
    get:
      description: Get amount of users list page
      operationId: GetUsersPageAmount
      responses:
        "200":
          description: Get successfully
          schema:
            $ref: '#/definitions/models.Pages'
            type: object
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: amount of users list page
swagger: "2.0"
