// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-11-17 15:26:04.799772471 +0300 MSK m=+7.375904544

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/avatar": {
            "post": {
                "security": [
                    {
                        "OAuth2Application": [
                            "write"
                        ]
                    }
                ],
                "description": "Load new avatar to the current user. The current one is the one whose token is provided.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "Create user avatar",
                "operationId": "PostImage",
                "parameters": [
                    {
                        "type": "file",
                        "description": "account image",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Avatar created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "401": {
                        "description": "Required authorization",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "Avatar not found",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/game": {
            "post": {
                "security": [
                    {
                        "OAuth2Application": [
                            "write"
                        ]
                    }
                ],
                "description": "Save offline game results of current user. The current one is the one whose token is provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game"
                ],
                "summary": "Save offline game",
                "operationId": "OfflineSave",
                "parameters": [
                    {
                        "description": "Results of offline game",
                        "name": "record",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Record"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Done",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "400": {
                        "description": "Invalid data for save",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "401": {
                        "description": "Required authorization",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/session": {
            "post": {
                "description": "Login into account and get auth2 token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "login",
                "operationId": "Login",
                "parameters": [
                    {
                        "description": "user's name and password",
                        "name": "information",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.UserPrivateInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserPublicInfo"
                        }
                    },
                    "400": {
                        "description": "invalid name or password",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OAuth2Application": [
                            "write"
                        ]
                    }
                ],
                "description": "Logout from account and delete auth2 token.",
                "tags": [
                    "account"
                ],
                "summary": "logout",
                "operationId": "Logout",
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "OAuth2Application": [
                            "read"
                        ]
                    }
                ],
                "description": "get user's best score and best time for a given difficulty, user's id, name and photo of current user. The current one is the one whose token is provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "get user public information",
                "operationId": "GetMyProfile",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "which difficult records will be given",
                        "name": "difficult",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get user successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserPublicInfo"
                        }
                    },
                    "401": {
                        "description": "Authorization required",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "OAuth2Application": [
                            "write"
                        ]
                    }
                ],
                "description": "update name or/and password of current user. The current one is the one whose token is provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "update user sensitive data",
                "operationId": "UpdateProfile",
                "parameters": [
                    {
                        "description": "user's name and password",
                        "name": "information",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.UserPrivateInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "400": {
                        "description": "Invalid data for update",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "401": {
                        "description": "Authorization required",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "post": {
                "description": "create new account and get oauth2 token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "create new user",
                "operationId": "CreateUser",
                "parameters": [
                    {
                        "description": "user's name and password",
                        "name": "information",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.UserPrivateInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create user successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "400": {
                        "description": "Invalid information",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "delete account",
                "operationId": "DeleteAccount",
                "parameters": [
                    {
                        "description": "user's name and password.  You are required to pass in the body of the request user name and password to confirm that you are the owner of the account.",
                        "name": "information",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.UserPrivateInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "400": {
                        "description": "Invalid data for delete",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/users/pages/amount": {
            "get": {
                "description": "You pass how many users should be placed on one page, and in return you get how many pages with users you can get.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "get number of pages with users",
                "operationId": "GetUsersPageAmount",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "number of users in one page",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Pages"
                        }
                    },
                    "400": {
                        "description": "Invalid path parameter",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/users/pages/{page}": {
            "get": {
                "description": "Get one page of users with selected size.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get users list",
                "operationId": "GetUsers",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "the offset of users list",
                        "name": "page",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "the limit of users page",
                        "name": "per_page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "which difficult records will be given",
                        "name": "difficult",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"time\"",
                        "description": "sort list by 'score' or by 'time'",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserPublicInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid pade",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "404": {
                        "description": "Users not found",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "get user's best score and best time for a given difficulty, user's id, name and photo of current user. The current one is the one whose token is provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "get user public information",
                "operationId": "getProfile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get user successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserPublicInfo"
                        }
                    },
                    "400": {
                        "description": "Wrong input data",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Pages": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                }
            }
        },
        "models.Record": {
            "type": "object",
            "properties": {
                "difficult": {
                    "type": "integer",
                    "minimum": 0
                },
                "onlineTotal": {
                    "type": "integer",
                    "minimum": 0
                },
                "onlineWin": {
                    "type": "integer",
                    "minimum": 0
                },
                "score": {
                    "type": "integer",
                    "minimum": 0
                },
                "singleTotal": {
                    "type": "integer",
                    "minimum": 0
                },
                "singleWin": {
                    "type": "integer",
                    "minimum": 0
                },
                "time": {
                    "type": "number"
                }
            }
        },
        "models.Result": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "place": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.UserPrivateInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "John"
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 6,
                    "example": "easyPassword"
                }
            }
        },
        "models.UserPublicInfo": {
            "type": "object",
            "properties": {
                "bestScore": {
                    "type": "string"
                },
                "bestTime": {
                    "type": "string"
                },
                "difficult": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3
                },
                "photo": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        }
    },
    "securityDefinitions": {
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "https://localhost:3003/auth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "read": " Grants read access",
                "write": " Grants write access"
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:3001",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "Escapade Explosion API",
	Description: "We don't have a public API, so instead of a real host(explosion.team) we specify localhost:3001. To test the following methods, git clone https://github.com/go-park-mail-ru/2019_1_Escapade, enter the root directory and run 'docker-compose up -d'",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
